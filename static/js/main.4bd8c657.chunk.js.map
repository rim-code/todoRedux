{"version":3,"sources":["App.js","serviceWorker.js","Reducers/listTodoReducers.js","Reducers/setInput.js","store.js","index.js"],"names":["App","add","text","props","SetInput","ADD_TODO","console","log","this","todos","onChange","e","CHANGE_TEXT","onClick","map","el","i","key","className","undo","Component","connect","dispatch","type","value","target","delete_Todo","id","Undo_Todo","Boolean","window","location","hostname","match","listTodo","TodosReducers","state","action","Math","random","setInput","store","createStore","combineReducers","listTods","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAGMA,G,iNAEJC,IAAI,WAEF,IAAKC,EAAK,EAAKC,MAAMC,SAGlB,EAAKD,MAAME,SAASH,EAFb,gB,wEAYF,IAAD,OAEP,OADAI,QAAQC,IAAIC,KAAKL,MAAMM,OACd,iCACb,mCACA,2BAAOC,SAAU,SAACC,GAAD,OAAK,EAAKR,MAAMS,YAAYD,MAC7C,0BAAOE,QAASL,KAAKP,KAArB,SAKA,mCAICO,KAAKL,MAAMM,MAAMK,KAAI,SAACC,EAAGC,GAE1B,OACA,uBAAGC,IAAKD,GAAG,0BAAME,UAAWH,EAAGI,MAAOJ,EAAGb,MACzC,wCACA,sCAFA,c,GAlCkBkB,cAkHHC,eA/CS,SAAC,GACvB,MAAM,CACJZ,MAF0C,EAApBA,MAGtBL,SAH0C,EAAbA,aAWJ,SAACkB,GAExB,MAAO,CAEPjB,SAAS,SAACH,EAAKiB,GACbG,EAAS,CAACC,KAAK,WAAWrB,KAAKA,EAAKiB,KAAKA,KAI3CP,YAAY,SAACD,GACnBW,EAAS,CAACC,KAAK,cAAcC,MAAMb,EAAEc,OAAOD,SAKtCE,YAAY,SAACC,GAAML,EAAS,CAClCC,KAAK,cAAcI,GAAGA,KAMhBC,UAAU,SAACD,GAEjBL,EAAS,CAACC,KAAK,YAAYI,GAAGA,QAYfN,CAA6CrB,GCzGxC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAC,EAAU,CACd,CAAC,GAAK,EAAG,KAAO,QAAQ,KAAO,eAC/B,CAAC,GAAK,EAAG,KAAO,QAAQ,KAAO,aAC/B,CAAC,GAAK,EAAG,KAAO,QAAQ,KAAO,eAC/B,CAAC,GAAK,EAAG,KAAO,QAAQ,KAAO,eAC/B,CAAC,GAAK,EAAG,KAAO,QAAQ,KAAO,gBAgBlBC,EAbO,WAA0B,IAAzBC,EAAwB,uDAAlBF,EAASG,EAAS,uCAE7C,MAAiB,aAAdA,EAAOd,KAEG,GAAD,mBAAKa,GAAL,CAAW,CAAC,GAAKE,KAAKC,OAAQ,KAAOF,EAAOnC,KAAM,KAAOmC,EAAOlB,QAMrEiB,GCTMI,EATA,WAAoB,IAAnBJ,EAAkB,uDAAZ,GAAGC,EAAS,uCAElC,MAAiB,gBAAdA,EAAOd,KACIc,EAAOb,MAEdY,GCKQK,EAPHC,YAAYC,YAAgB,CACtClC,MAAMmC,EACRxC,SAASA,KCKTyC,IAASC,OAAQ,kBAAC,IAAD,CAAUL,MAAOA,GAAO,kBAAC,EAAD,OAAqBM,SAASC,eAAe,SJyHhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4bd8c657.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './App.css'\nclass App extends Component {\n\n  add=()=>{\n    \n    let  text=this.props.SetInput\n    let  undo=\"text-normal\"\n  \n       this.props.ADD_TODO(text,undo)\n   \n   }\n\n\n\n\n\n  \n  \n  render() { \n    console.log(this.props.todos)\n    return ( <section>\n<div>   { /*Add */}\n<input onChange={(e)=>this.props.CHANGE_TEXT(e)} ></input>\n<span  onClick={this.add}>Add </span>\n\n\n</div>\n\n<div>   { /*List */}\n\n\n\n{this.props.todos.map((el,i)=>{\n\nreturn (\n<p key={i}><span className={el.undo}>{el.text}</span>\n<span  >Delete</span>\n<span >Undo</span> </p>\n\n\n)\n\n\n}\n\n\n\n\n\n)}\n\n\n\n    </div> \n\n\n\n    </section> );\n  }\n}\n \n\n\n\n\n\n\n\nconst mapStateToProps = ({todos ,SetInput })=>{\n  return{\n    todos:todos,\n    SetInput:SetInput\n  }\n    }\n\n\n\n\n\n    const mapDispatchToProps=(dispatch)=>{\n   \n      return { \n\n      ADD_TODO:(text,undo)=>{\n        dispatch({type:'ADD_TODO',text:text,undo:undo})\n      \n    \n      },\n      CHANGE_TEXT:(e)=>{\ndispatch({type:'CHANGE_TEXT',value:e.target.value})\n\n      },\n\n\n      delete_Todo:(id)=>{dispatch({\ntype:'delete_Todo',id:id\n\n\n      })},\n\n\n      Undo_Todo:(id)=>{\n\ndispatch({type:'Undo_Todo',id:id})\n\n      }\n\n\n      \n  \n      \n      }}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const listTodo =[\n  {\"id\":0, \"text\":\"item1\",\"undo\":\"text-normal\"},\n  {\"id\":1, \"text\":\"item2\",\"undo\":\"text-Undo\"},\n  {\"id\":2, \"text\":\"item3\",\"undo\":\"text-normal\"},\n  {\"id\":3, \"text\":\"item4\",\"undo\":\"text-normal\"},\n  {\"id\":4, \"text\":\"item5\",\"undo\":\"text-normal\"},\n\n]\nconst TodosReducers = (state=listTodo,action)=>{\n\n  if(action.type==='ADD_TODO')\n{\n  return state=[...state,{\"id\":Math.random, \"text\":action.text, \"undo\":action.undo  } ]\n}\n\n\n\n\n  return state\n}\n\nexport default TodosReducers","const setInput=(state='',action)=>{\n\nif(action.type==='CHANGE_TEXT')\n{return state=action.value}\n\nreturn state\n\n\n}\nexport default setInput","import {createStore,combineReducers} from 'redux'\nimport listTods from './Reducers/listTodoReducers'\nimport SetInput from './Reducers/setInput'\nconst store=createStore(combineReducers({\n  todos:listTods,\nSetInput:SetInput\n\n}))\n\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\n\nimport store from  './store'\n\nReactDOM.render( <Provider store={store}><App /></Provider> , document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}